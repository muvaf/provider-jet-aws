/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudFormationTypeObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DefaultVersionID *string `json:"defaultVersionId,omitempty" tf:"default_version_id,omitempty"`

	DeprecatedStatus *string `json:"deprecatedStatus,omitempty" tf:"deprecated_status,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DocumentationURL *string `json:"documentationUrl,omitempty" tf:"documentation_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsDefaultVersion *bool `json:"isDefaultVersion,omitempty" tf:"is_default_version,omitempty"`

	ProvisioningType *string `json:"provisioningType,omitempty" tf:"provisioning_type,omitempty"`

	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`

	TypeArn *string `json:"typeArn,omitempty" tf:"type_arn,omitempty"`

	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`

	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type CloudFormationTypeParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/iam/v1alpha2.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	ExecutionRoleArnRef *v1.Reference `json:"executionRoleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ExecutionRoleArnSelector *v1.Selector `json:"executionRoleArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoggingConfig []LoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SchemaHandlerPackage *string `json:"schemaHandlerPackage" tf:"schema_handler_package,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *string `json:"typeName" tf:"type_name,omitempty"`
}

type LoggingConfigObservation struct {
}

type LoggingConfigParameters struct {

	// +kubebuilder:validation:Required
	LogGroupName *string `json:"logGroupName" tf:"log_group_name,omitempty"`

	// +kubebuilder:validation:Required
	LogRoleArn *string `json:"logRoleArn" tf:"log_role_arn,omitempty"`
}

// CloudFormationTypeSpec defines the desired state of CloudFormationType
type CloudFormationTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudFormationTypeParameters `json:"forProvider"`
}

// CloudFormationTypeStatus defines the observed state of CloudFormationType.
type CloudFormationTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudFormationTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudFormationType is the Schema for the CloudFormationTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type CloudFormationType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudFormationTypeSpec   `json:"spec"`
	Status            CloudFormationTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudFormationTypeList contains a list of CloudFormationTypes
type CloudFormationTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudFormationType `json:"items"`
}

// Repository type metadata.
var (
	CloudFormationType_Kind             = "CloudFormationType"
	CloudFormationType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudFormationType_Kind}.String()
	CloudFormationType_KindAPIVersion   = CloudFormationType_Kind + "." + CRDGroupVersion.String()
	CloudFormationType_GroupVersionKind = CRDGroupVersion.WithKind(CloudFormationType_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudFormationType{}, &CloudFormationTypeList{})
}
