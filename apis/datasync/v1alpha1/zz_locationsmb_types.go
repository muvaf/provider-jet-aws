/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LocationSMBMountOptionsObservation struct {
}

type LocationSMBMountOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LocationSMBObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type LocationSMBParameters struct {

	// +kubebuilder:validation:Required
	AgentArns []*string `json:"agentArns" tf:"agent_arns,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	MountOptions []LocationSMBMountOptionsParameters `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ServerHostname *string `json:"serverHostname" tf:"server_hostname,omitempty"`

	// +kubebuilder:validation:Required
	Subdirectory *string `json:"subdirectory" tf:"subdirectory,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`
}

// LocationSMBSpec defines the desired state of LocationSMB
type LocationSMBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LocationSMBParameters `json:"forProvider"`
}

// LocationSMBStatus defines the observed state of LocationSMB.
type LocationSMBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LocationSMBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LocationSMB is the Schema for the LocationSMBs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type LocationSMB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LocationSMBSpec   `json:"spec"`
	Status            LocationSMBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LocationSMBList contains a list of LocationSMBs
type LocationSMBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LocationSMB `json:"items"`
}

// Repository type metadata.
var (
	LocationSMB_Kind             = "LocationSMB"
	LocationSMB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LocationSMB_Kind}.String()
	LocationSMB_KindAPIVersion   = LocationSMB_Kind + "." + CRDGroupVersion.String()
	LocationSMB_GroupVersionKind = CRDGroupVersion.WithKind(LocationSMB_Kind)
)

func init() {
	SchemeBuilder.Register(&LocationSMB{}, &LocationSMBList{})
}
