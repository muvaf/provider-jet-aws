/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CanaryObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	EngineArn *string `json:"engineArn,omitempty" tf:"engine_arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SourceLocationArn *string `json:"sourceLocationArn,omitempty" tf:"source_location_arn,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Timeline []TimelineObservation `json:"timeline,omitempty" tf:"timeline,omitempty"`

	VPCConfig []VPCConfigObservation `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`
}

type CanaryParameters struct {

	// +kubebuilder:validation:Required
	ArtifactS3Location *string `json:"artifactS3Location" tf:"artifact_s3_location,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/iam/v1alpha2.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	ExecutionRoleArnRef *v1.Reference `json:"executionRoleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ExecutionRoleArnSelector *v1.Selector `json:"executionRoleArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FailureRetentionPeriod *float64 `json:"failureRetentionPeriod,omitempty" tf:"failure_retention_period,omitempty"`

	// +kubebuilder:validation:Required
	Handler *string `json:"handler" tf:"handler,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RunConfig []RunConfigParameters `json:"runConfig,omitempty" tf:"run_config,omitempty"`

	// +kubebuilder:validation:Required
	RuntimeVersion *string `json:"runtimeVersion" tf:"runtime_version,omitempty"`

	// +kubebuilder:validation:Optional
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`

	// +kubebuilder:validation:Optional
	S3Version *string `json:"s3Version,omitempty" tf:"s3_version,omitempty"`

	// +kubebuilder:validation:Required
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Optional
	StartCanary *bool `json:"startCanary,omitempty" tf:"start_canary,omitempty"`

	// +kubebuilder:validation:Optional
	SuccessRetentionPeriod *float64 `json:"successRetentionPeriod,omitempty" tf:"success_retention_period,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VPCConfig []VPCConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`

	// +kubebuilder:validation:Optional
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type RunConfigObservation struct {
}

type RunConfigParameters struct {

	// +kubebuilder:validation:Optional
	ActiveTracing *bool `json:"activeTracing,omitempty" tf:"active_tracing,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryInMb *float64 `json:"memoryInMb,omitempty" tf:"memory_in_mb,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInSeconds *float64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds,omitempty"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// +kubebuilder:validation:Optional
	DurationInSeconds *float64 `json:"durationInSeconds,omitempty" tf:"duration_in_seconds,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`
}

type TimelineObservation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	LastStarted *string `json:"lastStarted,omitempty" tf:"last_started,omitempty"`

	LastStopped *string `json:"lastStopped,omitempty" tf:"last_stopped,omitempty"`
}

type TimelineParameters struct {
}

type VPCConfigObservation struct {
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type VPCConfigParameters struct {

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

// CanarySpec defines the desired state of Canary
type CanarySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CanaryParameters `json:"forProvider"`
}

// CanaryStatus defines the observed state of Canary.
type CanaryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CanaryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Canary is the Schema for the Canarys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type Canary struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CanarySpec   `json:"spec"`
	Status            CanaryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CanaryList contains a list of Canarys
type CanaryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Canary `json:"items"`
}

// Repository type metadata.
var (
	Canary_Kind             = "Canary"
	Canary_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Canary_Kind}.String()
	Canary_KindAPIVersion   = Canary_Kind + "." + CRDGroupVersion.String()
	Canary_GroupVersionKind = CRDGroupVersion.WithKind(Canary_Kind)
)

func init() {
	SchemeBuilder.Register(&Canary{}, &CanaryList{})
}
