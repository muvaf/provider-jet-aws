/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicDNSNamespaceObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	HostedZone *string `json:"hostedZone,omitempty" tf:"hosted_zone,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type PublicDNSNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PublicDNSNamespaceSpec defines the desired state of PublicDNSNamespace
type PublicDNSNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicDNSNamespaceParameters `json:"forProvider"`
}

// PublicDNSNamespaceStatus defines the observed state of PublicDNSNamespace.
type PublicDNSNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicDNSNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublicDNSNamespace is the Schema for the PublicDNSNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type PublicDNSNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicDNSNamespaceSpec   `json:"spec"`
	Status            PublicDNSNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicDNSNamespaceList contains a list of PublicDNSNamespaces
type PublicDNSNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicDNSNamespace `json:"items"`
}

// Repository type metadata.
var (
	PublicDNSNamespace_Kind             = "PublicDNSNamespace"
	PublicDNSNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicDNSNamespace_Kind}.String()
	PublicDNSNamespace_KindAPIVersion   = PublicDNSNamespace_Kind + "." + CRDGroupVersion.String()
	PublicDNSNamespace_GroupVersionKind = CRDGroupVersion.WithKind(PublicDNSNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&PublicDNSNamespace{}, &PublicDNSNamespaceList{})
}
