/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HTTPNamespaceObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type HTTPNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// HTTPNamespaceSpec defines the desired state of HTTPNamespace
type HTTPNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPNamespaceParameters `json:"forProvider"`
}

// HTTPNamespaceStatus defines the observed state of HTTPNamespace.
type HTTPNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPNamespace is the Schema for the HTTPNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type HTTPNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HTTPNamespaceSpec   `json:"spec"`
	Status            HTTPNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPNamespaceList contains a list of HTTPNamespaces
type HTTPNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPNamespace `json:"items"`
}

// Repository type metadata.
var (
	HTTPNamespace_Kind             = "HTTPNamespace"
	HTTPNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPNamespace_Kind}.String()
	HTTPNamespace_KindAPIVersion   = HTTPNamespace_Kind + "." + CRDGroupVersion.String()
	HTTPNamespace_GroupVersionKind = CRDGroupVersion.WithKind(HTTPNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPNamespace{}, &HTTPNamespaceList{})
}
