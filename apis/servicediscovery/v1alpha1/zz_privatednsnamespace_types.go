/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivateDNSNamespaceObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	HostedZone *string `json:"hostedZone,omitempty" tf:"hosted_zone,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type PrivateDNSNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPC *string `json:"vpc" tf:"vpc,omitempty"`
}

// PrivateDNSNamespaceSpec defines the desired state of PrivateDNSNamespace
type PrivateDNSNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateDNSNamespaceParameters `json:"forProvider"`
}

// PrivateDNSNamespaceStatus defines the observed state of PrivateDNSNamespace.
type PrivateDNSNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateDNSNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDNSNamespace is the Schema for the PrivateDNSNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type PrivateDNSNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateDNSNamespaceSpec   `json:"spec"`
	Status            PrivateDNSNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDNSNamespaceList contains a list of PrivateDNSNamespaces
type PrivateDNSNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDNSNamespace `json:"items"`
}

// Repository type metadata.
var (
	PrivateDNSNamespace_Kind             = "PrivateDNSNamespace"
	PrivateDNSNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateDNSNamespace_Kind}.String()
	PrivateDNSNamespace_KindAPIVersion   = PrivateDNSNamespace_Kind + "." + CRDGroupVersion.String()
	PrivateDNSNamespace_GroupVersionKind = CRDGroupVersion.WithKind(PrivateDNSNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateDNSNamespace{}, &PrivateDNSNamespaceList{})
}
