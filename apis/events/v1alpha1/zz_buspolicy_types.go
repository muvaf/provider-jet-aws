/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BusPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BusPolicyParameters struct {

	// +kubebuilder:validation:Optional
	EventBusName *string `json:"eventBusName,omitempty" tf:"event_bus_name,omitempty"`

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// BusPolicySpec defines the desired state of BusPolicy
type BusPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BusPolicyParameters `json:"forProvider"`
}

// BusPolicyStatus defines the observed state of BusPolicy.
type BusPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BusPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BusPolicy is the Schema for the BusPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type BusPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BusPolicySpec   `json:"spec"`
	Status            BusPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BusPolicyList contains a list of BusPolicys
type BusPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BusPolicy `json:"items"`
}

// Repository type metadata.
var (
	BusPolicy_Kind             = "BusPolicy"
	BusPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BusPolicy_Kind}.String()
	BusPolicy_KindAPIVersion   = BusPolicy_Kind + "." + CRDGroupVersion.String()
	BusPolicy_GroupVersionKind = CRDGroupVersion.WithKind(BusPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&BusPolicy{}, &BusPolicyList{})
}
