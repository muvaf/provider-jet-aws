/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SQLInjectionMatchSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SQLInjectionMatchSetParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SQLInjectionMatchTuples []SQLInjectionMatchTuplesParameters `json:"sqlInjectionMatchTuples,omitempty" tf:"sql_injection_match_tuples,omitempty"`
}

type SQLInjectionMatchTuplesFieldToMatchObservation struct {
}

type SQLInjectionMatchTuplesFieldToMatchParameters struct {

	// +kubebuilder:validation:Optional
	Data *string `json:"data,omitempty" tf:"data,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SQLInjectionMatchTuplesObservation struct {
}

type SQLInjectionMatchTuplesParameters struct {

	// +kubebuilder:validation:Required
	FieldToMatch []SQLInjectionMatchTuplesFieldToMatchParameters `json:"fieldToMatch" tf:"field_to_match,omitempty"`

	// +kubebuilder:validation:Required
	TextTransformation *string `json:"textTransformation" tf:"text_transformation,omitempty"`
}

// SQLInjectionMatchSetSpec defines the desired state of SQLInjectionMatchSet
type SQLInjectionMatchSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQLInjectionMatchSetParameters `json:"forProvider"`
}

// SQLInjectionMatchSetStatus defines the observed state of SQLInjectionMatchSet.
type SQLInjectionMatchSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLInjectionMatchSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SQLInjectionMatchSet is the Schema for the SQLInjectionMatchSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type SQLInjectionMatchSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SQLInjectionMatchSetSpec   `json:"spec"`
	Status            SQLInjectionMatchSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLInjectionMatchSetList contains a list of SQLInjectionMatchSets
type SQLInjectionMatchSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLInjectionMatchSet `json:"items"`
}

// Repository type metadata.
var (
	SQLInjectionMatchSet_Kind             = "SQLInjectionMatchSet"
	SQLInjectionMatchSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLInjectionMatchSet_Kind}.String()
	SQLInjectionMatchSet_KindAPIVersion   = SQLInjectionMatchSet_Kind + "." + CRDGroupVersion.String()
	SQLInjectionMatchSet_GroupVersionKind = CRDGroupVersion.WithKind(SQLInjectionMatchSet_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLInjectionMatchSet{}, &SQLInjectionMatchSetList{})
}
