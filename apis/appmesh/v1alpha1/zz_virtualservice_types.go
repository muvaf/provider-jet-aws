/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProviderObservation struct {
}

type ProviderParameters struct {

	// +kubebuilder:validation:Optional
	VirtualNode []ProviderVirtualNodeParameters `json:"virtualNode,omitempty" tf:"virtual_node,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualRouter []ProviderVirtualRouterParameters `json:"virtualRouter,omitempty" tf:"virtual_router,omitempty"`
}

type ProviderVirtualNodeObservation struct {
}

type ProviderVirtualNodeParameters struct {

	// +kubebuilder:validation:Required
	VirtualNodeName *string `json:"virtualNodeName" tf:"virtual_node_name,omitempty"`
}

type ProviderVirtualRouterObservation struct {
}

type ProviderVirtualRouterParameters struct {

	// +kubebuilder:validation:Required
	VirtualRouterName *string `json:"virtualRouterName" tf:"virtual_router_name,omitempty"`
}

type VirtualServiceObservation_2 struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	ResourceOwner *string `json:"resourceOwner,omitempty" tf:"resource_owner,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type VirtualServiceParameters_2 struct {

	// +kubebuilder:validation:Required
	MeshName *string `json:"meshName" tf:"mesh_name,omitempty"`

	// +kubebuilder:validation:Optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Spec []VirtualServiceSpecParameters `json:"spec" tf:"spec,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VirtualServiceSpecObservation struct {
}

type VirtualServiceSpecParameters struct {

	// +kubebuilder:validation:Optional
	Provider []ProviderParameters `json:"provider,omitempty" tf:"provider,omitempty"`
}

// VirtualServiceSpec defines the desired state of VirtualService
type VirtualServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualServiceParameters_2 `json:"forProvider"`
}

// VirtualServiceStatus defines the observed state of VirtualService.
type VirtualServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualServiceObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualService is the Schema for the VirtualServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type VirtualService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualServiceSpec   `json:"spec"`
	Status            VirtualServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualServiceList contains a list of VirtualServices
type VirtualServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualService `json:"items"`
}

// Repository type metadata.
var (
	VirtualService_Kind             = "VirtualService"
	VirtualService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualService_Kind}.String()
	VirtualService_KindAPIVersion   = VirtualService_Kind + "." + CRDGroupVersion.String()
	VirtualService_GroupVersionKind = CRDGroupVersion.WithKind(VirtualService_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualService{}, &VirtualServiceList{})
}
