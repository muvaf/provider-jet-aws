/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceFleetObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IotRoleAlias *string `json:"iotRoleAlias,omitempty" tf:"iot_role_alias,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type DeviceFleetParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DeviceFleetName *string `json:"deviceFleetName" tf:"device_fleet_name,omitempty"`

	// +kubebuilder:validation:Optional
	EnableIotRoleAlias *bool `json:"enableIotRoleAlias,omitempty" tf:"enable_iot_role_alias,omitempty"`

	// +kubebuilder:validation:Required
	OutputConfig []OutputConfigParameters `json:"outputConfig" tf:"output_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/iam/v1alpha2.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type OutputConfigObservation struct {
}

type OutputConfigParameters struct {

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Required
	S3OutputLocation *string `json:"s3OutputLocation" tf:"s3_output_location,omitempty"`
}

// DeviceFleetSpec defines the desired state of DeviceFleet
type DeviceFleetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceFleetParameters `json:"forProvider"`
}

// DeviceFleetStatus defines the observed state of DeviceFleet.
type DeviceFleetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceFleetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceFleet is the Schema for the DeviceFleets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type DeviceFleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceFleetSpec   `json:"spec"`
	Status            DeviceFleetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceFleetList contains a list of DeviceFleets
type DeviceFleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceFleet `json:"items"`
}

// Repository type metadata.
var (
	DeviceFleet_Kind             = "DeviceFleet"
	DeviceFleet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceFleet_Kind}.String()
	DeviceFleet_KindAPIVersion   = DeviceFleet_Kind + "." + CRDGroupVersion.String()
	DeviceFleet_GroupVersionKind = CRDGroupVersion.WithKind(DeviceFleet_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceFleet{}, &DeviceFleetList{})
}
