/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HumanTaskUIObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	UITemplate []UITemplateObservation `json:"uiTemplate,omitempty" tf:"ui_template,omitempty"`
}

type HumanTaskUIParameters struct {

	// +kubebuilder:validation:Required
	HumanTaskUIName *string `json:"humanTaskUiName" tf:"human_task_ui_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	UITemplate []UITemplateParameters `json:"uiTemplate" tf:"ui_template,omitempty"`
}

type UITemplateObservation struct {
	ContentSha256 *string `json:"contentSha256,omitempty" tf:"content_sha256,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type UITemplateParameters struct {

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`
}

// HumanTaskUISpec defines the desired state of HumanTaskUI
type HumanTaskUISpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HumanTaskUIParameters `json:"forProvider"`
}

// HumanTaskUIStatus defines the observed state of HumanTaskUI.
type HumanTaskUIStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HumanTaskUIObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HumanTaskUI is the Schema for the HumanTaskUIs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type HumanTaskUI struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HumanTaskUISpec   `json:"spec"`
	Status            HumanTaskUIStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HumanTaskUIList contains a list of HumanTaskUIs
type HumanTaskUIList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HumanTaskUI `json:"items"`
}

// Repository type metadata.
var (
	HumanTaskUI_Kind             = "HumanTaskUI"
	HumanTaskUI_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HumanTaskUI_Kind}.String()
	HumanTaskUI_KindAPIVersion   = HumanTaskUI_Kind + "." + CRDGroupVersion.String()
	HumanTaskUI_GroupVersionKind = CRDGroupVersion.WithKind(HumanTaskUI_Kind)
)

func init() {
	SchemeBuilder.Register(&HumanTaskUI{}, &HumanTaskUIList{})
}
