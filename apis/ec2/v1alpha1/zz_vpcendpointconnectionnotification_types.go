/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCEndpointConnectionNotificationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NotificationType *string `json:"notificationType,omitempty" tf:"notification_type,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type VPCEndpointConnectionNotificationParameters struct {

	// +kubebuilder:validation:Required
	ConnectionEvents []*string `json:"connectionEvents" tf:"connection_events,omitempty"`

	// +kubebuilder:validation:Required
	ConnectionNotificationArn *string `json:"connectionNotificationArn" tf:"connection_notification_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCEndpointID *string `json:"vpcEndpointId,omitempty" tf:"vpc_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	VPCEndpointServiceID *string `json:"vpcEndpointServiceId,omitempty" tf:"vpc_endpoint_service_id,omitempty"`
}

// VPCEndpointConnectionNotificationSpec defines the desired state of VPCEndpointConnectionNotification
type VPCEndpointConnectionNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCEndpointConnectionNotificationParameters `json:"forProvider"`
}

// VPCEndpointConnectionNotificationStatus defines the observed state of VPCEndpointConnectionNotification.
type VPCEndpointConnectionNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCEndpointConnectionNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointConnectionNotification is the Schema for the VPCEndpointConnectionNotifications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type VPCEndpointConnectionNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEndpointConnectionNotificationSpec   `json:"spec"`
	Status            VPCEndpointConnectionNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointConnectionNotificationList contains a list of VPCEndpointConnectionNotifications
type VPCEndpointConnectionNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEndpointConnectionNotification `json:"items"`
}

// Repository type metadata.
var (
	VPCEndpointConnectionNotification_Kind             = "VPCEndpointConnectionNotification"
	VPCEndpointConnectionNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCEndpointConnectionNotification_Kind}.String()
	VPCEndpointConnectionNotification_KindAPIVersion   = VPCEndpointConnectionNotification_Kind + "." + CRDGroupVersion.String()
	VPCEndpointConnectionNotification_GroupVersionKind = CRDGroupVersion.WithKind(VPCEndpointConnectionNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCEndpointConnectionNotification{}, &VPCEndpointConnectionNotificationList{})
}
