/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientDataObservation struct {
}

type ClientDataParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	UploadEnd *string `json:"uploadEnd,omitempty" tf:"upload_end,omitempty"`

	// +kubebuilder:validation:Optional
	UploadSize *float64 `json:"uploadSize,omitempty" tf:"upload_size,omitempty"`

	// +kubebuilder:validation:Optional
	UploadStart *string `json:"uploadStart,omitempty" tf:"upload_start,omitempty"`
}

type DiskContainerObservation struct {
}

type DiskContainerParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	UserBucket []UserBucketParameters `json:"userBucket,omitempty" tf:"user_bucket,omitempty"`
}

type EBSSnapshotImportObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DataEncryptionKeyID *string `json:"dataEncryptionKeyId,omitempty" tf:"data_encryption_key_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty" tf:"owner_alias,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`
}

type EBSSnapshotImportParameters struct {

	// +kubebuilder:validation:Optional
	ClientData []ClientDataParameters `json:"clientData,omitempty" tf:"client_data,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DiskContainer []DiskContainerParameters `json:"diskContainer" tf:"disk_container,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/kms/v1alpha2.Key
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyIDRef *v1.Reference `json:"kmsKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KMSKeyIDSelector *v1.Selector `json:"kmsKeyIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type UserBucketObservation struct {
}

type UserBucketParameters struct {

	// +kubebuilder:validation:Required
	S3Bucket *string `json:"s3Bucket" tf:"s3_bucket,omitempty"`

	// +kubebuilder:validation:Required
	S3Key *string `json:"s3Key" tf:"s3_key,omitempty"`
}

// EBSSnapshotImportSpec defines the desired state of EBSSnapshotImport
type EBSSnapshotImportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EBSSnapshotImportParameters `json:"forProvider"`
}

// EBSSnapshotImportStatus defines the observed state of EBSSnapshotImport.
type EBSSnapshotImportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EBSSnapshotImportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EBSSnapshotImport is the Schema for the EBSSnapshotImports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type EBSSnapshotImport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EBSSnapshotImportSpec   `json:"spec"`
	Status            EBSSnapshotImportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EBSSnapshotImportList contains a list of EBSSnapshotImports
type EBSSnapshotImportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EBSSnapshotImport `json:"items"`
}

// Repository type metadata.
var (
	EBSSnapshotImport_Kind             = "EBSSnapshotImport"
	EBSSnapshotImport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EBSSnapshotImport_Kind}.String()
	EBSSnapshotImport_KindAPIVersion   = EBSSnapshotImport_Kind + "." + CRDGroupVersion.String()
	EBSSnapshotImport_GroupVersionKind = CRDGroupVersion.WithKind(EBSSnapshotImport_Kind)
)

func init() {
	SchemeBuilder.Register(&EBSSnapshotImport{}, &EBSSnapshotImportList{})
}
