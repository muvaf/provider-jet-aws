/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientVPNAuthorizationRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientVPNAuthorizationRuleParameters struct {

	// +kubebuilder:validation:Optional
	AccessGroupID *string `json:"accessGroupId,omitempty" tf:"access_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	AuthorizeAllGroups *bool `json:"authorizeAllGroups,omitempty" tf:"authorize_all_groups,omitempty"`

	// +kubebuilder:validation:Required
	ClientVPNEndpointID *string `json:"clientVpnEndpointId" tf:"client_vpn_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	TargetNetworkCidr *string `json:"targetNetworkCidr" tf:"target_network_cidr,omitempty"`
}

// ClientVPNAuthorizationRuleSpec defines the desired state of ClientVPNAuthorizationRule
type ClientVPNAuthorizationRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientVPNAuthorizationRuleParameters `json:"forProvider"`
}

// ClientVPNAuthorizationRuleStatus defines the observed state of ClientVPNAuthorizationRule.
type ClientVPNAuthorizationRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientVPNAuthorizationRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientVPNAuthorizationRule is the Schema for the ClientVPNAuthorizationRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ClientVPNAuthorizationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientVPNAuthorizationRuleSpec   `json:"spec"`
	Status            ClientVPNAuthorizationRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientVPNAuthorizationRuleList contains a list of ClientVPNAuthorizationRules
type ClientVPNAuthorizationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientVPNAuthorizationRule `json:"items"`
}

// Repository type metadata.
var (
	ClientVPNAuthorizationRule_Kind             = "ClientVPNAuthorizationRule"
	ClientVPNAuthorizationRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientVPNAuthorizationRule_Kind}.String()
	ClientVPNAuthorizationRule_KindAPIVersion   = ClientVPNAuthorizationRule_Kind + "." + CRDGroupVersion.String()
	ClientVPNAuthorizationRule_GroupVersionKind = CRDGroupVersion.WithKind(ClientVPNAuthorizationRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientVPNAuthorizationRule{}, &ClientVPNAuthorizationRuleList{})
}
