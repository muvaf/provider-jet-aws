/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EBSSnapshotObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DataEncryptionKeyID *string `json:"dataEncryptionKeyId,omitempty" tf:"data_encryption_key_id,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty" tf:"owner_alias,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`
}

type EBSSnapshotParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VolumeID *string `json:"volumeId" tf:"volume_id,omitempty"`
}

// EBSSnapshotSpec defines the desired state of EBSSnapshot
type EBSSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EBSSnapshotParameters `json:"forProvider"`
}

// EBSSnapshotStatus defines the observed state of EBSSnapshot.
type EBSSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EBSSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EBSSnapshot is the Schema for the EBSSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type EBSSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EBSSnapshotSpec   `json:"spec"`
	Status            EBSSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EBSSnapshotList contains a list of EBSSnapshots
type EBSSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EBSSnapshot `json:"items"`
}

// Repository type metadata.
var (
	EBSSnapshot_Kind             = "EBSSnapshot"
	EBSSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EBSSnapshot_Kind}.String()
	EBSSnapshot_KindAPIVersion   = EBSSnapshot_Kind + "." + CRDGroupVersion.String()
	EBSSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(EBSSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&EBSSnapshot{}, &EBSSnapshotList{})
}
