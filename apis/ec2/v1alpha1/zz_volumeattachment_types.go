/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VolumeAttachmentParameters struct {

	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	ForceDetach *bool `json:"forceDetach,omitempty" tf:"force_detach,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// +kubebuilder:validation:Required
	VolumeID *string `json:"volumeId" tf:"volume_id,omitempty"`
}

// VolumeAttachmentSpec defines the desired state of VolumeAttachment
type VolumeAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeAttachmentParameters `json:"forProvider"`
}

// VolumeAttachmentStatus defines the observed state of VolumeAttachment.
type VolumeAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachment is the Schema for the VolumeAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type VolumeAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeAttachmentSpec   `json:"spec"`
	Status            VolumeAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachmentList contains a list of VolumeAttachments
type VolumeAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttachment `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttachment_Kind             = "VolumeAttachment"
	VolumeAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeAttachment_Kind}.String()
	VolumeAttachment_KindAPIVersion   = VolumeAttachment_Kind + "." + CRDGroupVersion.String()
	VolumeAttachment_GroupVersionKind = CRDGroupVersion.WithKind(VolumeAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeAttachment{}, &VolumeAttachmentList{})
}
