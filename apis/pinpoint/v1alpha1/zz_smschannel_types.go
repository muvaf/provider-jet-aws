/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SMSChannelObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PromotionalMessagesPerSecond *float64 `json:"promotionalMessagesPerSecond,omitempty" tf:"promotional_messages_per_second,omitempty"`

	TransactionalMessagesPerSecond *float64 `json:"transactionalMessagesPerSecond,omitempty" tf:"transactional_messages_per_second,omitempty"`
}

type SMSChannelParameters struct {

	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`

	// +kubebuilder:validation:Optional
	ShortCode *string `json:"shortCode,omitempty" tf:"short_code,omitempty"`
}

// SMSChannelSpec defines the desired state of SMSChannel
type SMSChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SMSChannelParameters `json:"forProvider"`
}

// SMSChannelStatus defines the observed state of SMSChannel.
type SMSChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SMSChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SMSChannel is the Schema for the SMSChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type SMSChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SMSChannelSpec   `json:"spec"`
	Status            SMSChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SMSChannelList contains a list of SMSChannels
type SMSChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SMSChannel `json:"items"`
}

// Repository type metadata.
var (
	SMSChannel_Kind             = "SMSChannel"
	SMSChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SMSChannel_Kind}.String()
	SMSChannel_KindAPIVersion   = SMSChannel_Kind + "." + CRDGroupVersion.String()
	SMSChannel_GroupVersionKind = CRDGroupVersion.WithKind(SMSChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&SMSChannel{}, &SMSChannelList{})
}
