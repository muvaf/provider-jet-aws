/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ADMChannelObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ADMChannelParameters struct {

	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientIDSecretRef v1.SecretKeySelector `json:"clientIdSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ADMChannelSpec defines the desired state of ADMChannel
type ADMChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ADMChannelParameters `json:"forProvider"`
}

// ADMChannelStatus defines the observed state of ADMChannel.
type ADMChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ADMChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ADMChannel is the Schema for the ADMChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ADMChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ADMChannelSpec   `json:"spec"`
	Status            ADMChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ADMChannelList contains a list of ADMChannels
type ADMChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ADMChannel `json:"items"`
}

// Repository type metadata.
var (
	ADMChannel_Kind             = "ADMChannel"
	ADMChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ADMChannel_Kind}.String()
	ADMChannel_KindAPIVersion   = ADMChannel_Kind + "." + CRDGroupVersion.String()
	ADMChannel_GroupVersionKind = CRDGroupVersion.WithKind(ADMChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&ADMChannel{}, &ADMChannelList{})
}
