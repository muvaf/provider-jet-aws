/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupTagObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupTagParameters struct {

	// +kubebuilder:validation:Required
	AutoscalingGroupName *string `json:"autoscalingGroupName" tf:"autoscaling_group_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Tag []TagParameters `json:"tag" tf:"tag,omitempty"`
}

type TagObservation struct {
}

type TagParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	PropagateAtLaunch *bool `json:"propagateAtLaunch" tf:"propagate_at_launch,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// GroupTagSpec defines the desired state of GroupTag
type GroupTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupTagParameters `json:"forProvider"`
}

// GroupTagStatus defines the observed state of GroupTag.
type GroupTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupTag is the Schema for the GroupTags API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type GroupTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupTagSpec   `json:"spec"`
	Status            GroupTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupTagList contains a list of GroupTags
type GroupTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupTag `json:"items"`
}

// Repository type metadata.
var (
	GroupTag_Kind             = "GroupTag"
	GroupTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupTag_Kind}.String()
	GroupTag_KindAPIVersion   = GroupTag_Kind + "." + CRDGroupVersion.String()
	GroupTag_GroupVersionKind = CRDGroupVersion.WithKind(GroupTag_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupTag{}, &GroupTagList{})
}
