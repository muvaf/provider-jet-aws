/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IntegrationResponseObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IntegrationResponseParameters struct {

	// +kubebuilder:validation:Optional
	ContentHandling *string `json:"contentHandling,omitempty" tf:"content_handling,omitempty"`

	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod" tf:"http_method,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseParameters map[string]*string `json:"responseParameters,omitempty" tf:"response_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseTemplates map[string]*string `json:"responseTemplates,omitempty" tf:"response_templates,omitempty"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`

	// +kubebuilder:validation:Optional
	SelectionPattern *string `json:"selectionPattern,omitempty" tf:"selection_pattern,omitempty"`

	// +kubebuilder:validation:Required
	StatusCode *string `json:"statusCode" tf:"status_code,omitempty"`
}

// IntegrationResponseSpec defines the desired state of IntegrationResponse
type IntegrationResponseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IntegrationResponseParameters `json:"forProvider"`
}

// IntegrationResponseStatus defines the observed state of IntegrationResponse.
type IntegrationResponseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IntegrationResponseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationResponse is the Schema for the IntegrationResponses API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type IntegrationResponse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationResponseSpec   `json:"spec"`
	Status            IntegrationResponseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationResponseList contains a list of IntegrationResponses
type IntegrationResponseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IntegrationResponse `json:"items"`
}

// Repository type metadata.
var (
	IntegrationResponse_Kind             = "IntegrationResponse"
	IntegrationResponse_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IntegrationResponse_Kind}.String()
	IntegrationResponse_KindAPIVersion   = IntegrationResponse_Kind + "." + CRDGroupVersion.String()
	IntegrationResponse_GroupVersionKind = CRDGroupVersion.WithKind(IntegrationResponse_Kind)
)

func init() {
	SchemeBuilder.Register(&IntegrationResponse{}, &IntegrationResponseList{})
}
