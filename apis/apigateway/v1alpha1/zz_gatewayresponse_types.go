/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayResponseObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayResponseParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ResponseParameters map[string]*string `json:"responseParameters,omitempty" tf:"response_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseTemplates map[string]*string `json:"responseTemplates,omitempty" tf:"response_templates,omitempty"`

	// +kubebuilder:validation:Required
	ResponseType *string `json:"responseType" tf:"response_type,omitempty"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`

	// +kubebuilder:validation:Optional
	StatusCode *string `json:"statusCode,omitempty" tf:"status_code,omitempty"`
}

// GatewayResponseSpec defines the desired state of GatewayResponse
type GatewayResponseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayResponseParameters `json:"forProvider"`
}

// GatewayResponseStatus defines the observed state of GatewayResponse.
type GatewayResponseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayResponseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayResponse is the Schema for the GatewayResponses API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type GatewayResponse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayResponseSpec   `json:"spec"`
	Status            GatewayResponseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayResponseList contains a list of GatewayResponses
type GatewayResponseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayResponse `json:"items"`
}

// Repository type metadata.
var (
	GatewayResponse_Kind             = "GatewayResponse"
	GatewayResponse_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayResponse_Kind}.String()
	GatewayResponse_KindAPIVersion   = GatewayResponse_Kind + "." + CRDGroupVersion.String()
	GatewayResponse_GroupVersionKind = CRDGroupVersion.WithKind(GatewayResponse_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayResponse{}, &GatewayResponseList{})
}
