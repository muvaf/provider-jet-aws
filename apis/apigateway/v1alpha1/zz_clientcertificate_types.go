/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientCertificateObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PemEncodedCertificate *string `json:"pemEncodedCertificate,omitempty" tf:"pem_encoded_certificate,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ClientCertificateParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ClientCertificateSpec defines the desired state of ClientCertificate
type ClientCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientCertificateParameters `json:"forProvider"`
}

// ClientCertificateStatus defines the observed state of ClientCertificate.
type ClientCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientCertificate is the Schema for the ClientCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ClientCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientCertificateSpec   `json:"spec"`
	Status            ClientCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientCertificateList contains a list of ClientCertificates
type ClientCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientCertificate `json:"items"`
}

// Repository type metadata.
var (
	ClientCertificate_Kind             = "ClientCertificate"
	ClientCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientCertificate_Kind}.String()
	ClientCertificate_KindAPIVersion   = ClientCertificate_Kind + "." + CRDGroupVersion.String()
	ClientCertificate_GroupVersionKind = CRDGroupVersion.WithKind(ClientCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientCertificate{}, &ClientCertificateList{})
}
