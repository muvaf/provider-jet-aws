/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProtectionGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProtectionGroupArn *string `json:"protectionGroupArn,omitempty" tf:"protection_group_arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ProtectionGroupParameters struct {

	// +kubebuilder:validation:Required
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// +kubebuilder:validation:Optional
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`

	// +kubebuilder:validation:Required
	ProtectionGroupID *string `json:"protectionGroupId" tf:"protection_group_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ProtectionGroupSpec defines the desired state of ProtectionGroup
type ProtectionGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectionGroupParameters `json:"forProvider"`
}

// ProtectionGroupStatus defines the observed state of ProtectionGroup.
type ProtectionGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectionGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionGroup is the Schema for the ProtectionGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ProtectionGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectionGroupSpec   `json:"spec"`
	Status            ProtectionGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionGroupList contains a list of ProtectionGroups
type ProtectionGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProtectionGroup `json:"items"`
}

// Repository type metadata.
var (
	ProtectionGroup_Kind             = "ProtectionGroup"
	ProtectionGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProtectionGroup_Kind}.String()
	ProtectionGroup_KindAPIVersion   = ProtectionGroup_Kind + "." + CRDGroupVersion.String()
	ProtectionGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProtectionGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProtectionGroup{}, &ProtectionGroupList{})
}
