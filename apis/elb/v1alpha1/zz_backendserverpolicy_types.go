/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendServerPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackendServerPolicyParameters struct {

	// +kubebuilder:validation:Required
	InstancePort *float64 `json:"instancePort" tf:"instance_port,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerName *string `json:"loadBalancerName" tf:"load_balancer_name,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyNames []*string `json:"policyNames,omitempty" tf:"policy_names,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// BackendServerPolicySpec defines the desired state of BackendServerPolicy
type BackendServerPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackendServerPolicyParameters `json:"forProvider"`
}

// BackendServerPolicyStatus defines the observed state of BackendServerPolicy.
type BackendServerPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackendServerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackendServerPolicy is the Schema for the BackendServerPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type BackendServerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackendServerPolicySpec   `json:"spec"`
	Status            BackendServerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackendServerPolicyList contains a list of BackendServerPolicys
type BackendServerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackendServerPolicy `json:"items"`
}

// Repository type metadata.
var (
	BackendServerPolicy_Kind             = "BackendServerPolicy"
	BackendServerPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackendServerPolicy_Kind}.String()
	BackendServerPolicy_KindAPIVersion   = BackendServerPolicy_Kind + "." + CRDGroupVersion.String()
	BackendServerPolicy_GroupVersionKind = CRDGroupVersion.WithKind(BackendServerPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&BackendServerPolicy{}, &BackendServerPolicyList{})
}
