/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ListenerPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ListenerPolicyParameters struct {

	// +kubebuilder:validation:Required
	LoadBalancerName *string `json:"loadBalancerName" tf:"load_balancer_name,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerPort *float64 `json:"loadBalancerPort" tf:"load_balancer_port,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyNames []*string `json:"policyNames,omitempty" tf:"policy_names,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ListenerPolicySpec defines the desired state of ListenerPolicy
type ListenerPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerPolicyParameters `json:"forProvider"`
}

// ListenerPolicyStatus defines the observed state of ListenerPolicy.
type ListenerPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerPolicy is the Schema for the ListenerPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ListenerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerPolicySpec   `json:"spec"`
	Status            ListenerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerPolicyList contains a list of ListenerPolicys
type ListenerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ListenerPolicy `json:"items"`
}

// Repository type metadata.
var (
	ListenerPolicy_Kind             = "ListenerPolicy"
	ListenerPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ListenerPolicy_Kind}.String()
	ListenerPolicy_KindAPIVersion   = ListenerPolicy_Kind + "." + CRDGroupVersion.String()
	ListenerPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ListenerPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ListenerPolicy{}, &ListenerPolicyList{})
}
