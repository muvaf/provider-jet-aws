/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BootstrapActionObservation struct {
}

type BootstrapActionParameters struct {

	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type ClusterObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ClusterState *string `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	CoreInstanceFleet []CoreInstanceFleetObservation `json:"coreInstanceFleet,omitempty" tf:"core_instance_fleet,omitempty"`

	CoreInstanceGroup []CoreInstanceGroupObservation `json:"coreInstanceGroup,omitempty" tf:"core_instance_group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterInstanceFleet []MasterInstanceFleetObservation `json:"masterInstanceFleet,omitempty" tf:"master_instance_fleet,omitempty"`

	MasterInstanceGroup []MasterInstanceGroupObservation `json:"masterInstanceGroup,omitempty" tf:"master_instance_group,omitempty"`

	MasterPublicDNS *string `json:"masterPublicDns,omitempty" tf:"master_public_dns,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ClusterParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalInfo *string `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// +kubebuilder:validation:Optional
	Applications []*string `json:"applications,omitempty" tf:"applications,omitempty"`

	// +kubebuilder:validation:Optional
	AutoscalingRole *string `json:"autoscalingRole,omitempty" tf:"autoscaling_role,omitempty"`

	// +kubebuilder:validation:Optional
	BootstrapAction []BootstrapActionParameters `json:"bootstrapAction,omitempty" tf:"bootstrap_action,omitempty"`

	// +kubebuilder:validation:Optional
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// +kubebuilder:validation:Optional
	CoreInstanceFleet []CoreInstanceFleetParameters `json:"coreInstanceFleet,omitempty" tf:"core_instance_fleet,omitempty"`

	// +kubebuilder:validation:Optional
	CoreInstanceGroup []CoreInstanceGroupParameters `json:"coreInstanceGroup,omitempty" tf:"core_instance_group,omitempty"`

	// +kubebuilder:validation:Optional
	CustomAMIID *string `json:"customAmiId,omitempty" tf:"custom_ami_id,omitempty"`

	// +kubebuilder:validation:Optional
	EBSRootVolumeSize *float64 `json:"ebsRootVolumeSize,omitempty" tf:"ebs_root_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	EC2Attributes []EC2AttributesParameters `json:"ec2Attributes,omitempty" tf:"ec2_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	KeepJobFlowAliveWhenNoSteps *bool `json:"keepJobFlowAliveWhenNoSteps,omitempty" tf:"keep_job_flow_alive_when_no_steps,omitempty"`

	// +kubebuilder:validation:Optional
	KerberosAttributes []KerberosAttributesParameters `json:"kerberosAttributes,omitempty" tf:"kerberos_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	LogURI *string `json:"logUri,omitempty" tf:"log_uri,omitempty"`

	// +kubebuilder:validation:Optional
	MasterInstanceFleet []MasterInstanceFleetParameters `json:"masterInstanceFleet,omitempty" tf:"master_instance_fleet,omitempty"`

	// +kubebuilder:validation:Optional
	MasterInstanceGroup []MasterInstanceGroupParameters `json:"masterInstanceGroup,omitempty" tf:"master_instance_group,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReleaseLabel *string `json:"releaseLabel" tf:"release_label,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleDownBehavior *string `json:"scaleDownBehavior,omitempty" tf:"scale_down_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration,omitempty"`

	// +kubebuilder:validation:Required
	ServiceRole *string `json:"serviceRole" tf:"service_role,omitempty"`

	// +kubebuilder:validation:Optional
	Step []StepParameters `json:"step,omitempty" tf:"step,omitempty"`

	// +kubebuilder:validation:Optional
	StepConcurrencyLevel *float64 `json:"stepConcurrencyLevel,omitempty" tf:"step_concurrency_level,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TerminationProtection *bool `json:"terminationProtection,omitempty" tf:"termination_protection,omitempty"`

	// +kubebuilder:validation:Optional
	VisibleToAllUsers *bool `json:"visibleToAllUsers,omitempty" tf:"visible_to_all_users,omitempty"`
}

type ConfigurationsObservation struct {
}

type ConfigurationsParameters struct {

	// +kubebuilder:validation:Optional
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type CoreInstanceFleetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProvisionedOnDemandCapacity *float64 `json:"provisionedOnDemandCapacity,omitempty" tf:"provisioned_on_demand_capacity,omitempty"`

	ProvisionedSpotCapacity *float64 `json:"provisionedSpotCapacity,omitempty" tf:"provisioned_spot_capacity,omitempty"`
}

type CoreInstanceFleetParameters struct {

	// +kubebuilder:validation:Optional
	InstanceTypeConfigs []InstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchSpecifications []LaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type CoreInstanceGroupEBSConfigObservation struct {
}

type CoreInstanceGroupEBSConfigParameters struct {

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type CoreInstanceGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CoreInstanceGroupParameters struct {

	// +kubebuilder:validation:Optional
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// +kubebuilder:validation:Optional
	EBSConfig []CoreInstanceGroupEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EBSConfigObservation struct {
}

type EBSConfigParameters struct {

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type EC2AttributesObservation struct {
}

type EC2AttributesParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalMasterSecurityGroups *string `json:"additionalMasterSecurityGroups,omitempty" tf:"additional_master_security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	AdditionalSlaveSecurityGroups *string `json:"additionalSlaveSecurityGroups,omitempty" tf:"additional_slave_security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	EmrManagedMasterSecurityGroup *string `json:"emrManagedMasterSecurityGroup,omitempty" tf:"emr_managed_master_security_group,omitempty"`

	// +kubebuilder:validation:Optional
	EmrManagedSlaveSecurityGroup *string `json:"emrManagedSlaveSecurityGroup,omitempty" tf:"emr_managed_slave_security_group,omitempty"`

	// +kubebuilder:validation:Required
	InstanceProfile *string `json:"instanceProfile" tf:"instance_profile,omitempty"`

	// +kubebuilder:validation:Optional
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccessSecurityGroup *string `json:"serviceAccessSecurityGroup,omitempty" tf:"service_access_security_group,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type HadoopJarStepObservation struct {
}

type HadoopJarStepParameters struct {

	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args"`

	// +kubebuilder:validation:Optional
	Jar *string `json:"jar,omitempty" tf:"jar"`

	// +kubebuilder:validation:Optional
	MainClass *string `json:"mainClass,omitempty" tf:"main_class"`

	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties"`
}

type InstanceTypeConfigsConfigurationsObservation struct {
}

type InstanceTypeConfigsConfigurationsParameters struct {

	// +kubebuilder:validation:Optional
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceTypeConfigsEBSConfigObservation struct {
}

type InstanceTypeConfigsEBSConfigParameters struct {

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceTypeConfigsObservation struct {
}

type InstanceTypeConfigsParameters struct {

	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// +kubebuilder:validation:Optional
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// +kubebuilder:validation:Optional
	Configurations []ConfigurationsParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// +kubebuilder:validation:Optional
	EBSConfig []EBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type KerberosAttributesObservation struct {
}

type KerberosAttributesParameters struct {

	// +kubebuilder:validation:Optional
	AdDomainJoinPasswordSecretRef *v1.SecretKeySelector `json:"adDomainJoinPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AdDomainJoinUser *string `json:"adDomainJoinUser,omitempty" tf:"ad_domain_join_user,omitempty"`

	// +kubebuilder:validation:Optional
	CrossRealmTrustPrincipalPasswordSecretRef *v1.SecretKeySelector `json:"crossRealmTrustPrincipalPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	KdcAdminPasswordSecretRef v1.SecretKeySelector `json:"kdcAdminPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Realm *string `json:"realm" tf:"realm,omitempty"`
}

type LaunchSpecificationsObservation struct {
}

type LaunchSpecificationsOnDemandSpecificationObservation struct {
}

type LaunchSpecificationsOnDemandSpecificationParameters struct {

	// +kubebuilder:validation:Required
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`
}

type LaunchSpecificationsParameters struct {

	// +kubebuilder:validation:Optional
	OnDemandSpecification []OnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// +kubebuilder:validation:Optional
	SpotSpecification []SpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type LaunchSpecificationsSpotSpecificationObservation struct {
}

type LaunchSpecificationsSpotSpecificationParameters struct {

	// +kubebuilder:validation:Required
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// +kubebuilder:validation:Required
	TimeoutAction *string `json:"timeoutAction" tf:"timeout_action,omitempty"`

	// +kubebuilder:validation:Required
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes,omitempty"`
}

type MasterInstanceFleetInstanceTypeConfigsObservation struct {
}

type MasterInstanceFleetInstanceTypeConfigsParameters struct {

	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// +kubebuilder:validation:Optional
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// +kubebuilder:validation:Optional
	Configurations []InstanceTypeConfigsConfigurationsParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// +kubebuilder:validation:Optional
	EBSConfig []InstanceTypeConfigsEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type MasterInstanceFleetLaunchSpecificationsObservation struct {
}

type MasterInstanceFleetLaunchSpecificationsParameters struct {

	// +kubebuilder:validation:Optional
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// +kubebuilder:validation:Optional
	SpotSpecification []LaunchSpecificationsSpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type MasterInstanceFleetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProvisionedOnDemandCapacity *float64 `json:"provisionedOnDemandCapacity,omitempty" tf:"provisioned_on_demand_capacity,omitempty"`

	ProvisionedSpotCapacity *float64 `json:"provisionedSpotCapacity,omitempty" tf:"provisioned_spot_capacity,omitempty"`
}

type MasterInstanceFleetParameters struct {

	// +kubebuilder:validation:Optional
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchSpecifications []MasterInstanceFleetLaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type MasterInstanceGroupEBSConfigObservation struct {
}

type MasterInstanceGroupEBSConfigParameters struct {

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type MasterInstanceGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MasterInstanceGroupParameters struct {

	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// +kubebuilder:validation:Optional
	EBSConfig []MasterInstanceGroupEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnDemandSpecificationObservation struct {
}

type OnDemandSpecificationParameters struct {

	// +kubebuilder:validation:Required
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`
}

type SpotSpecificationObservation struct {
}

type SpotSpecificationParameters struct {

	// +kubebuilder:validation:Required
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// +kubebuilder:validation:Required
	TimeoutAction *string `json:"timeoutAction" tf:"timeout_action,omitempty"`

	// +kubebuilder:validation:Required
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes,omitempty"`
}

type StepObservation struct {
}

type StepParameters struct {

	// +kubebuilder:validation:Optional
	ActionOnFailure *string `json:"actionOnFailure,omitempty" tf:"action_on_failure"`

	// +kubebuilder:validation:Optional
	HadoopJarStep []HadoopJarStepParameters `json:"hadoopJarStep,omitempty" tf:"hadoop_jar_step"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
