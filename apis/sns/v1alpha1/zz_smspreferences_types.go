/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SMSPreferencesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SMSPreferencesParameters struct {

	// +kubebuilder:validation:Optional
	DefaultSMSType *string `json:"defaultSmsType,omitempty" tf:"default_sms_type,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultSenderID *string `json:"defaultSenderId,omitempty" tf:"default_sender_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/iam/v1alpha2.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	DeliveryStatusIAMRoleArn *string `json:"deliveryStatusIamRoleArn,omitempty" tf:"delivery_status_iam_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryStatusIAMRoleArnRef *v1.Reference `json:"deliveryStatusIamRoleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DeliveryStatusIAMRoleArnSelector *v1.Selector `json:"deliveryStatusIamRoleArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DeliveryStatusSuccessSamplingRate *string `json:"deliveryStatusSuccessSamplingRate,omitempty" tf:"delivery_status_success_sampling_rate,omitempty"`

	// +kubebuilder:validation:Optional
	MonthlySpendLimit *string `json:"monthlySpendLimit,omitempty" tf:"monthly_spend_limit,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	UsageReportS3Bucket *string `json:"usageReportS3Bucket,omitempty" tf:"usage_report_s3_bucket,omitempty"`
}

// SMSPreferencesSpec defines the desired state of SMSPreferences
type SMSPreferencesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SMSPreferencesParameters `json:"forProvider"`
}

// SMSPreferencesStatus defines the observed state of SMSPreferences.
type SMSPreferencesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SMSPreferencesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SMSPreferences is the Schema for the SMSPreferencess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type SMSPreferences struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SMSPreferencesSpec   `json:"spec"`
	Status            SMSPreferencesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SMSPreferencesList contains a list of SMSPreferencess
type SMSPreferencesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SMSPreferences `json:"items"`
}

// Repository type metadata.
var (
	SMSPreferences_Kind             = "SMSPreferences"
	SMSPreferences_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SMSPreferences_Kind}.String()
	SMSPreferences_KindAPIVersion   = SMSPreferences_Kind + "." + CRDGroupVersion.String()
	SMSPreferences_GroupVersionKind = CRDGroupVersion.WithKind(SMSPreferences_Kind)
)

func init() {
	SchemeBuilder.Register(&SMSPreferences{}, &SMSPreferencesList{})
}
