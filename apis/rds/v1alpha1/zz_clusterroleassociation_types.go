/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterRoleAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterRoleAssociationParameters struct {

	// +kubebuilder:validation:Required
	DBClusterIdentifier *string `json:"dbClusterIdentifier" tf:"db_cluster_identifier,omitempty"`

	// +kubebuilder:validation:Required
	FeatureName *string `json:"featureName" tf:"feature_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/iam/v1alpha2.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`
}

// ClusterRoleAssociationSpec defines the desired state of ClusterRoleAssociation
type ClusterRoleAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterRoleAssociationParameters `json:"forProvider"`
}

// ClusterRoleAssociationStatus defines the observed state of ClusterRoleAssociation.
type ClusterRoleAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterRoleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterRoleAssociation is the Schema for the ClusterRoleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ClusterRoleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterRoleAssociationSpec   `json:"spec"`
	Status            ClusterRoleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterRoleAssociationList contains a list of ClusterRoleAssociations
type ClusterRoleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterRoleAssociation `json:"items"`
}

// Repository type metadata.
var (
	ClusterRoleAssociation_Kind             = "ClusterRoleAssociation"
	ClusterRoleAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterRoleAssociation_Kind}.String()
	ClusterRoleAssociation_KindAPIVersion   = ClusterRoleAssociation_Kind + "." + CRDGroupVersion.String()
	ClusterRoleAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ClusterRoleAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterRoleAssociation{}, &ClusterRoleAssociationList{})
}
