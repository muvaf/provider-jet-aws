/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionPoolConfigObservation struct {
}

type ConnectionPoolConfigParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionBorrowTimeout *float64 `json:"connectionBorrowTimeout,omitempty" tf:"connection_borrow_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	InitQuery *string `json:"initQuery,omitempty" tf:"init_query,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConnectionsPercent *float64 `json:"maxConnectionsPercent,omitempty" tf:"max_connections_percent,omitempty"`

	// +kubebuilder:validation:Optional
	MaxIdleConnectionsPercent *float64 `json:"maxIdleConnectionsPercent,omitempty" tf:"max_idle_connections_percent,omitempty"`

	// +kubebuilder:validation:Optional
	SessionPinningFilters []*string `json:"sessionPinningFilters,omitempty" tf:"session_pinning_filters,omitempty"`
}

type ProxyDefaultTargetGroupObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProxyDefaultTargetGroupParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionPoolConfig []ConnectionPoolConfigParameters `json:"connectionPoolConfig,omitempty" tf:"connection_pool_config,omitempty"`

	// +kubebuilder:validation:Required
	DBProxyName *string `json:"dbProxyName" tf:"db_proxy_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ProxyDefaultTargetGroupSpec defines the desired state of ProxyDefaultTargetGroup
type ProxyDefaultTargetGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProxyDefaultTargetGroupParameters `json:"forProvider"`
}

// ProxyDefaultTargetGroupStatus defines the observed state of ProxyDefaultTargetGroup.
type ProxyDefaultTargetGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProxyDefaultTargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyDefaultTargetGroup is the Schema for the ProxyDefaultTargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ProxyDefaultTargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProxyDefaultTargetGroupSpec   `json:"spec"`
	Status            ProxyDefaultTargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyDefaultTargetGroupList contains a list of ProxyDefaultTargetGroups
type ProxyDefaultTargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProxyDefaultTargetGroup `json:"items"`
}

// Repository type metadata.
var (
	ProxyDefaultTargetGroup_Kind             = "ProxyDefaultTargetGroup"
	ProxyDefaultTargetGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProxyDefaultTargetGroup_Kind}.String()
	ProxyDefaultTargetGroup_KindAPIVersion   = ProxyDefaultTargetGroup_Kind + "." + CRDGroupVersion.String()
	ProxyDefaultTargetGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProxyDefaultTargetGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProxyDefaultTargetGroup{}, &ProxyDefaultTargetGroupList{})
}
