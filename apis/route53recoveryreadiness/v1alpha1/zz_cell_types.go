/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CellObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ParentReadinessScopes []*string `json:"parentReadinessScopes,omitempty" tf:"parent_readiness_scopes,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type CellParameters struct {

	// +kubebuilder:validation:Required
	CellName *string `json:"cellName" tf:"cell_name,omitempty"`

	// +kubebuilder:validation:Optional
	Cells []*string `json:"cells,omitempty" tf:"cells,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// CellSpec defines the desired state of Cell
type CellSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CellParameters `json:"forProvider"`
}

// CellStatus defines the observed state of Cell.
type CellStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CellObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cell is the Schema for the Cells API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type Cell struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CellSpec   `json:"spec"`
	Status            CellStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CellList contains a list of Cells
type CellList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cell `json:"items"`
}

// Repository type metadata.
var (
	Cell_Kind             = "Cell"
	Cell_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cell_Kind}.String()
	Cell_KindAPIVersion   = Cell_Kind + "." + CRDGroupVersion.String()
	Cell_GroupVersionKind = CRDGroupVersion.WithKind(Cell_Kind)
)

func init() {
	SchemeBuilder.Register(&Cell{}, &CellList{})
}
