/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainDKIMObservation struct {
	DKIMTokens []*string `json:"dkimTokens,omitempty" tf:"dkim_tokens,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DomainDKIMParameters struct {

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// DomainDKIMSpec defines the desired state of DomainDKIM
type DomainDKIMSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainDKIMParameters `json:"forProvider"`
}

// DomainDKIMStatus defines the observed state of DomainDKIM.
type DomainDKIMStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainDKIMObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainDKIM is the Schema for the DomainDKIMs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type DomainDKIM struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainDKIMSpec   `json:"spec"`
	Status            DomainDKIMStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainDKIMList contains a list of DomainDKIMs
type DomainDKIMList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainDKIM `json:"items"`
}

// Repository type metadata.
var (
	DomainDKIM_Kind             = "DomainDKIM"
	DomainDKIM_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainDKIM_Kind}.String()
	DomainDKIM_KindAPIVersion   = DomainDKIM_Kind + "." + CRDGroupVersion.String()
	DomainDKIM_GroupVersionKind = CRDGroupVersion.WithKind(DomainDKIM_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainDKIM{}, &DomainDKIMList{})
}
