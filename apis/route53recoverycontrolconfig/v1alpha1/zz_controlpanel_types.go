/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ControlPanelObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DefaultControlPanel *bool `json:"defaultControlPanel,omitempty" tf:"default_control_panel,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RoutingControlCount *float64 `json:"routingControlCount,omitempty" tf:"routing_control_count,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ControlPanelParameters struct {

	// +kubebuilder:validation:Required
	ClusterArn *string `json:"clusterArn" tf:"cluster_arn,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ControlPanelSpec defines the desired state of ControlPanel
type ControlPanelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ControlPanelParameters `json:"forProvider"`
}

// ControlPanelStatus defines the observed state of ControlPanel.
type ControlPanelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ControlPanelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ControlPanel is the Schema for the ControlPanels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ControlPanel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ControlPanelSpec   `json:"spec"`
	Status            ControlPanelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ControlPanelList contains a list of ControlPanels
type ControlPanelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ControlPanel `json:"items"`
}

// Repository type metadata.
var (
	ControlPanel_Kind             = "ControlPanel"
	ControlPanel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ControlPanel_Kind}.String()
	ControlPanel_KindAPIVersion   = ControlPanel_Kind + "." + CRDGroupVersion.String()
	ControlPanel_GroupVersionKind = CRDGroupVersion.WithKind(ControlPanel_Kind)
)

func init() {
	SchemeBuilder.Register(&ControlPanel{}, &ControlPanelList{})
}
