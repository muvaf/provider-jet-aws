/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleConfigObservation struct {
}

type RuleConfigParameters struct {

	// +kubebuilder:validation:Required
	Inverted *bool `json:"inverted" tf:"inverted,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SafetyRuleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SafetyRuleParameters struct {

	// +kubebuilder:validation:Optional
	AssertedControls []*string `json:"assertedControls,omitempty" tf:"asserted_controls,omitempty"`

	// +kubebuilder:validation:Required
	ControlPanelArn *string `json:"controlPanelArn" tf:"control_panel_arn,omitempty"`

	// +kubebuilder:validation:Optional
	GatingControls []*string `json:"gatingControls,omitempty" tf:"gating_controls,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RuleConfig []RuleConfigParameters `json:"ruleConfig" tf:"rule_config,omitempty"`

	// +kubebuilder:validation:Optional
	TargetControls []*string `json:"targetControls,omitempty" tf:"target_controls,omitempty"`

	// +kubebuilder:validation:Required
	WaitPeriodMs *float64 `json:"waitPeriodMs" tf:"wait_period_ms,omitempty"`
}

// SafetyRuleSpec defines the desired state of SafetyRule
type SafetyRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SafetyRuleParameters `json:"forProvider"`
}

// SafetyRuleStatus defines the observed state of SafetyRule.
type SafetyRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SafetyRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SafetyRule is the Schema for the SafetyRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type SafetyRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SafetyRuleSpec   `json:"spec"`
	Status            SafetyRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SafetyRuleList contains a list of SafetyRules
type SafetyRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SafetyRule `json:"items"`
}

// Repository type metadata.
var (
	SafetyRule_Kind             = "SafetyRule"
	SafetyRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SafetyRule_Kind}.String()
	SafetyRule_KindAPIVersion   = SafetyRule_Kind + "." + CRDGroupVersion.String()
	SafetyRule_GroupVersionKind = CRDGroupVersion.WithKind(SafetyRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SafetyRule{}, &SafetyRuleList{})
}
